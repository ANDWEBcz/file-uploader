{"google":"","body":"### Valum's File Uploader v2.0 ###\r\n\r\nWelcome! This project attempts to achieve a user-friendly file-uploading experience over the web. \r\nIt's built as a Javascript plugin for developers looking to incorporate file-uploading into their website.\r\n\r\nThis is a public fork of Valum's File Uploader (v1) in an attempt to incorporate some of the best \r\nbugfixes and patches to make a version compatible with the latest browsers in 2012.\r\n\r\nWe would love developers to contribute any improvements and bugfixes they produce.<br>\r\nSee [How do I contribute to other's code in GitHub?](http://stackoverflow.com/questions/4384776/how-do-i-contribute-to-others-code-in-github).\r\n\r\nInitiated by <a href=\"https://github.com/SimonEast\">SimonEast</a>, but interested maintainers are welcome.\r\n\r\n\r\n### Summary ###\r\n\r\nThis plugin uses an XMLHttpRequest (AJAX) for uploading multiple files with a progress-bar in \r\nFF3.6+, Safari4+, Chrome and falls back to hidden-iframe-based upload in other browsers (namely IE), \r\nproviding good user experience everywhere.\r\n\r\nIt does not use Flash, jQuery, or any external libraries.\r\n\r\n#### <a href=\"http://valums.com/files/2010/file-uploader/demo.htm\">Original Demo by Valum</a> ####\r\n\r\n### Features ###\r\n* Multiple file select, progress-bar in FF, Chrome, Safari\r\n* Drag-and-drop file select in FF, Chrome\r\n* Uploads are cancellable\r\n* No external dependencies\r\n* Doesn't use Flash\r\n* Fully working with HTTPS\r\n* Keyboard support in FF, Chrome, Safari\r\n* Tested in IE7/8, Firefox 3/3.6/4, Safari 4/5, Chrome, and Opera 10.60\r\n\r\n### License ###\r\nThis plugin is open sourced under <a href=\"http://www.gnu.org/licenses/gpl-2.0.html\">GNU GPL 2</a> or later and <a href=\"http://www.gnu.org/licenses/lgpl-2.1.html\">GNU LGPL 2</a> or later.\r\n\r\n### Known Issues ###\r\nPlugin breaks back button functionality in Opera.\r\n\t\r\n### Getting started ###\r\nThe `fileuploader.js` contains two classes that are meant to be used directly.\r\nIf you need a complete upload widget (from demo) to quickly drop\r\ninto your current design, use `qq.FileUploader`.\r\n\r\nIf you want to customize uploader, by using a different looking file list\r\nor change the behaviour or functionality use `qq.FileUploaderBasic`.\r\n\r\nThe difference between them is that `qq.FileUploader` provides a list of files,\r\ndrag-and-drop, but `qq.FileUploaderBasic` only creates button and handles validation.\r\nBasic uploader is easier extendable, and doesn't limit possible customization.\r\n\r\n`qq.FileUploader` extends `qq.FileUploaderBasic`, so that all the options present\r\nin the basic uploader also exist in the full widget.  \r\n\r\n### qq.FileUploader - Setting up full upload widget ###\r\n\r\nInclude `fileuploader.js` and `fileuploader.css` into your page.\r\nCreate container element.\r\n\r\n```html\r\n<div id=\"file-uploader\">       \r\n<noscript>          \r\n    <p>Please enable JavaScript to use file uploader.</p>\r\n    <!-- or put a simple form for upload here -->\r\n</noscript>         \r\n</div>\r\n```\r\n\r\nInitialize uploader when the DOM is ready. Change the action option.\r\nFor example ../server/php.php for the default folder structure.\r\nIn the server folder you will find examples for different platforms.\r\nIf you can't find the one you need, check the readme.txt in the same folder. \r\n\r\n```javascript\r\nvar uploader = new qq.FileUploader({\r\n\t// pass the dom node (ex. $(selector)[0] for jQuery users)\r\n\telement: document.getElementById('file-uploader'),\r\n\t// path to server-side upload script\r\n\taction: '/server/upload'\r\n}); \r\n```\r\n\r\n### Options of both classes ###\r\n\r\n```javascript\r\n    // url of the server-side upload script, should be on the same domain\r\n    action: '/server/upload',\r\n    // additional data to send, name-value pairs\r\n    params: {},\r\n    \r\n    // validation    \r\n    // ex. ['jpg', 'jpeg', 'png', 'gif'] or []\r\n    allowedExtensions: [],        \r\n    // each file size limit in bytes\r\n    // this option isn't supported in all browsers\r\n    sizeLimit: 0, // max size   \r\n    minSizeLimit: 0, // min size\r\n    \r\n    // set to true to output server response to console\r\n    debug: false,\r\n    \r\n    // events         \r\n    // you can return false to abort submit\r\n    onSubmit: function(id, fileName){},\r\n    onProgress: function(id, fileName, loaded, total){},\r\n    onComplete: function(id, fileName, responseJSON){},\r\n    onCancel: function(id, fileName){},\r\n    onError: function(id, fileName, xhr){}\r\n    \r\n    messages: {\r\n        // error messages, see qq.FileUploaderBasic for content            \r\n    },\r\n    showMessage: function(message){ alert(message); }        \r\n```\r\n\r\nInstance methods\r\n\r\n* `setParams(newParams)`\r\n\r\n#### Changing alert/messages to something more user friendly ####\r\n\r\nIf you limited file types and max size, you will probably want to change the default alert and\r\nmessages as you see fit, this is possible using showMessage callback and messages option.\r\n\r\n#### Sending additional params ####\r\n\r\nTo add a parameter that will be passed as a query string with each upload use params option. \r\n\r\n```javascript\r\n    var uploader = new qq.FileUploader({\r\n        element: document.getElementById('file-uploader'),\r\n        action: '/server-side.upload',\r\n        // additional data to send, name-value pairs\r\n        params: {\r\n            param1: 'value1',\r\n            param2: 'value2'\r\n        }\r\n    });\r\n```\r\n\r\nTo change params based on the state of your app, use \r\n\r\n```javascript\r\n    uploader.setParams({\r\n       anotherParam: 'value' \r\n    });\r\n```\r\n\r\nIt can be nicely used in `onSubmit` callback.      \r\n\r\n#### Troubleshooting ####\r\n\r\nIf you can't get the uploader to work, please try the following steps\r\nbefore asking for help.\r\n\r\nIf the upload doesn't complete, saying \"failed\":\r\n\r\n* Set the `debug` option of the FileUploader to true.\r\n* Open the page where you have a FileUploader.\r\n* Open developer console in your browser.\r\n* Try to upload the file. You should see a server serponse.\r\n\r\nIt should be `{success:true}` for completed requests. If it's not,\r\nthen you have a problem with your server-side script.\r\n\r\n#### Contributors ####\r\n\r\nThanks to everybody who contributed, either by sending bug reports or donating. And special thanks to:\r\n\r\nJohn Yeary  \r\nSidney Maestre  \r\nPatrick Pfeiffer  \r\nSean Sandy (SeanJA)  \r\nAndy Newby     \r\nIvan Valles  \r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Valum's File-Uploader v2.0","tagline":"Multiple file upload plugin for HTML forms. User-friendly progress-bar + uploads via drag-and-drop. Coded in Javascript + AJAX, not Flash. Server-side PHP, Java, & ColdFusion examples included."}